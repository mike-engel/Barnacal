// Generated by BUCKLESCRIPT VERSION 2.2.3, PLEASE EDIT WITH CARE

import * as FFI from "./FFI.js";
import * as Week from "./Week.js";
import * as $$Array from "bs-platform/lib/es6/array.js";
import * as Electron from "electron";
import * as Caml_array from "bs-platform/lib/es6/caml_array.js";
import * as ReasonReact from "reason-react/lib/es6/src/ReasonReact.js";
import * as Get_day from "date-fns/get_day";
import * as Is_today from "date-fns/is_today";
import * as Caml_builtin_exceptions from "bs-platform/lib/es6/caml_builtin_exceptions.js";
import * as Get_days_in_month from "date-fns/get_days_in_month";

var component = ReasonReact.statelessComponent("CalendarBody");

var table_styles = { };

function week_day_number(date) {
  var user_first_day = Electron.remote.getGlobal("global").firstWeekday;
  var day_index = Get_day(date);
  var offset_index = user_first_day - 1 | 0;
  var index = day_index - offset_index | 0;
  if (index === day_index) {
    return day_index;
  } else if (index > 0) {
    return index;
  } else if (index < 0) {
    return 7 + index | 0;
  } else if (index === 0) {
    return 0;
  } else {
    throw [
          Caml_builtin_exceptions.match_failure,
          [
            "CalendarBody.re",
            19,
            2
          ]
        ];
  }
}

function week_of_month(date, day_of_month) {
  var first_of_month = FFI.DateFns[/* start_of_month */1](date);
  var first_weekday = week_day_number(first_of_month);
  var offset = (day_of_month + first_weekday | 0) - 1 | 0;
  return offset / 7 | 0;
}

function month_date(date, idx, _) {
  var day_of_month = idx + 1 | 0;
  var date$1 = FFI.DateFns[/* set_date */0](date, day_of_month);
  var day_of_week = week_day_number(date$1);
  var week = week_of_month(date$1, day_of_month);
  var is_today = +Is_today(date$1);
  return /* tuple */[
          week,
          day_of_week,
          day_of_month,
          is_today
        ];
}

function fold_weeks(container, weekday) {
  Caml_array.caml_array_set(Caml_array.caml_array_get(container, weekday[0]), weekday[1], /* tuple */[
        /* Some */[weekday[2]],
        weekday[3]
      ]);
  return container;
}

function parse_weeks(date, day_count) {
  var empty_dates = Caml_array.caml_make_vect(day_count, date);
  var dates = $$Array.mapi((function (param, param$1) {
          return month_date(date, param, param$1);
        }), empty_dates);
  var empty_weeks = $$Array.make_matrix(6, 7, /* tuple */[
        /* None */0,
        /* false */0
      ]);
  return $$Array.fold_left(fold_weeks, empty_weeks, dates);
}

function week_component(idx, week) {
  return ReasonReact.element(/* Some */[String(idx)], /* None */0, Week.make(week, /* array */[]));
}

function make(date, _) {
  var newrecord = component.slice();
  newrecord[/* render */9] = (function () {
      var day_count = Get_days_in_month(date);
      var weeks = parse_weeks(date, day_count);
      return ReasonReact.createDomElement("tbody", {
                  style: table_styles
                }, $$Array.mapi(week_component, weeks));
    });
  return newrecord;
}

export {
  component ,
  table_styles ,
  week_day_number ,
  week_of_month ,
  month_date ,
  fold_weeks ,
  parse_weeks ,
  week_component ,
  make ,
  
}
/* component Not a pure module */
